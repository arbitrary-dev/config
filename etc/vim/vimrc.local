set number
set smartindent
set ignorecase smartcase
set nowrap
set et sw=2 ts=2 sts=2
set hidden
set clipboard=unnamedplus
set backspace=indent,eol,start
set hls

" Enables per file VIM configuration
set modeline

" disable auto-wrapping on typing
set formatoptions-=t

set textwidth=80 colorcolumn=80
au FileType scala setlocal tw=110 cc=110
" nosmartindent for python, cause it messes up with shifting #* lines
au FileType python setlocal fdm=indent nosi

map K r<CR>

map =jq :%!jq --indent 2<CR>
map =jd :%!python3 -c '
\import json,sys;
\obj = json.loads(sys.stdin.read());
\print(json.dumps(json.dumps(obj, separators=(",", ":"))))
\'<CR>
map =jl :%!python3 -c 'import json,sys; print(json.loads(sys.stdin.read()))'<CR>

nnoremap <silent> <leader>. /^[<\|=>]\{7}.*$<CR>
nnoremap <silent> <leader><leader> :nohlsearch<CR>
nnoremap <silent> <leader>dt :diffthis<CR>
nnoremap <silent> <leader>do :diffoff<CR>
nnoremap <silent> <leader>dp :diffput<CR>
nnoremap <silent> <leader>dg :diffget<CR>
nnoremap <silent> <leader>w :set wrap!<CR>
nnoremap <silent> <leader>bw :bp\|bw#<CR>
" nnoremap <silent> <leader>f :windo set foldcolumn=0<CR>
nnoremap <silent> <leader>fd :setl fdm=indent<CR>:let &l:fdl=indent('.')/&sw<CR>

" Prevents opening of the folds during }{ navigation
" https://github.com/vim/vim/issues/7134
set foldopen-=block


" trailing spaces highlighting
au FileType *
  \ if &ft == 'diff' |
    \ match Error /\(^+.\{-}\)\@<=\s\+$/ |
  \ else |
    \ 2match Error /\s\+$/ |
  \ endif

" Find syntax highlight group under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


" fix trailing space in diff additions only
command FTS %s/^\(+.\{-}\)\s\+$/\1/
" fix trailing space anywhere
command FTSA %s/\s\+$//

syntax on
filetype plugin indent on

" Colors

hi ColorColumn ctermbg=52
hi clear Search
hi Search cterm=inverse
hi Visual ctermfg=black ctermbg=red
"hi Todo ctermfg=brown ctermbg=178
hi Comment ctermfg=darkgray
hi Folded ctermfg=darkgray ctermbg=none
hi FoldColumn ctermfg=darkgray ctermbg=none
hi StatusLine cterm=none ctermfg=white ctermbg=darkgray
hi StatusLineNC cterm=none ctermfg=black ctermbg=darkgray
hi VertSplit cterm=none ctermfg=black ctermbg=darkgray
hi LineNr ctermfg=darkgray
set cursorline
hi CursorLine cterm=none
map <silent> <leader>cl :call ToggleCursorLine()<CR>
function ToggleCursorLine()
  if match(execute('hi CursorLine'), 'ctermbg') >= 0
    hi CursorLine ctermbg=none
  else
    hi CursorLine ctermbg=52
  endif
endfunction
hi CursorLineNr cterm=none ctermfg=black ctermbg=red
"hi ModeMsg cterm=none ctermfg=223 ctermbg=brown
"hi ErrorMsg ctermfg=yellow ctermbg=red
hi DiffChange ctermfg=black ctermbg=darkred
hi DiffText ctermfg=white ctermbg=red
hi DiffDelete ctermfg=darkgray ctermbg=none
hi diffRemoved ctermfg=red
hi DiffAdd ctermfg=black ctermbg=darkgreen
hi diffAdded ctermfg=darkgreen
"syntax match DiffMerge /^[<|=>]\{7}.*$/ containedin=ALL contained
"hi link DiffMerge Comment
hi NonText ctermfg=darkgray
hi SignColumn ctermbg=none
hi Pmenu ctermfg=lightgray ctermbg=237
hi PmenuSel ctermfg=black ctermbg=red

hi scalaKeywordModifier ctermfg=yellow
hi scalaUnimplemented ctermfg=black ctermbg=yellow

hi CocErrorFloat ctermfg=lightred
hi CocWarningFloat ctermfg=lightyellow
hi CocHighlightText ctermbg=237
hi CocHoverRange ctermbg=235
hi CocCursorRange ctermbg=235

hi markdownUrl ctermfg=lightblue
hi markdownLinkText ctermfg=lightblue cterm=underline
