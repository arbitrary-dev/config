set number
set smartindent
set ignorecase smartcase
set nowrap
set et sw=2 ts=2 sts=2
set hidden
set clipboard=unnamed
set backspace=indent,eol,start
set hls

augroup filetypedetect
  au BufRead,BufNewFile *.hamlet setfiletype haskell
augroup END

set textwidth=80 colorcolumn=80
au FileType scala set tw=110 cc=110
" nosmartindent for python, cause it messes up with shifting #* lines
au FileType python set fdm=indent nosi
" disable auto-wrapping on typing
set formatoptions-=t

map K r<CR>

map =jt :%!python3 -m json.tool<CR>
map =jd :%!python3 -c '
\import json,sys;
\obj = json.loads(sys.stdin.read());
\print(json.dumps(json.dumps(obj, separators=(",", ":"))))
\'<CR>
map =jl :%!python3 -c 'import json,sys; print(json.loads(sys.stdin.read()))'<CR>

nnoremap <silent> <leader>. /^[<\|=>]\{7}.*$<CR>
nnoremap <silent> <leader><leader> :nohlsearch<CR>
nnoremap <leader>d :diffthis<CR>
nnoremap <leader>D :diffoff<CR>
nnoremap <leader>w :set wrap!<CR>

" trailing spaces highlighting
au FileType *
  \ if &ft == 'diff' |
    \ match Error /\(^+.\{-}\)\@<=\s\+$/ |
  \ else |
    \ match Error /\s\+$/ |
  \ endif

" Find syntax highlight group under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


" fix trailing space in diff additions only
command FTS %s/^\(+.\{-}\)\s\+$/\1/
" fix trailing space anywhere
command FTSA %s/\s\+$//

" 1. Install vim-plug
" curl -fLo /usr/local/share/vim/vimfiles/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
" 2. Install plugins
" :PlugInstall
call plug#begin('/usr/local/share/vim/vimfiles/vim-plug')
Plug 'godlygeek/tabular'

Plug 'scrooloose/nerdtree'
map <leader>t :NERDTreeFind<CR>
let NERDTreeIgnore=['^target$[[dir]]']

" coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}
set updatetime=300
set nobackup nowritebackup
" Trigger completion
inoremap <silent><expr> <c-space> coc#refresh()
" Confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
" Goto's
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Show documentation
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
" Highlight symbol
"autocmd CursorHold * silent call CocActionAsync('highlight')
" Rename current word
nmap <leader>rn <Plug>(coc-rename)
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Search CWD files
nnoremap <silent> <space>f  :<C-u>CocList files<cr>
" Search MRU (most recently used) files
nnoremap <silent> <space>r  :<C-u>CocList mru<cr>
" Grep workspace
nnoremap <silent> <space>g  :<C-u>CocList grep<cr>
cabbrev gr <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'CocList<space>grep' : 'gr')<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Scala
Plug 'derekwyatt/vim-scala'
au BufRead,BufNewFile *.sbt set filetype=scala

call plug#end()

syntax on
filetype plugin indent on

" Colors
hi ColorColumn ctermbg=178
hi Search ctermbg=yellow ctermfg=brown
hi Visual ctermfg=229 ctermbg=brown
hi Todo ctermfg=brown ctermbg=178
hi Comment ctermfg=brown
hi FoldColumn ctermfg=136 ctermbg=none
hi Folded ctermfg=136 ctermbg=none
hi StatusLine cterm=none ctermfg=223 ctermbg=136
hi StatusLineNC cterm=none ctermfg=136 ctermbg=136
hi VertSplit cterm=none ctermfg=136 ctermbg=136
hi LineNr ctermfg=136
hi ModeMsg cterm=none ctermfg=223 ctermbg=brown
hi ErrorMsg ctermfg=yellow ctermbg=red
hi DiffChange ctermfg=lightred ctermbg=red
hi DiffText ctermfg=lightred ctermbg=202 cterm=none
hi DiffDelete ctermfg=red ctermbg=darkred
hi diffRemoved ctermfg=red
hi DiffAdd ctermbg=darkgreen ctermfg=lightgreen
hi diffAdded ctermfg=darkgreen
